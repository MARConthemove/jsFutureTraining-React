{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    quantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      // Payload is a non-official, community accepted (de facto) naming convention for the property that holds the actual data in a Redux action object.\n      const newItem = state.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.Price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/marconthemove/code/MARConthemove/jsFutureTraining React/19 Redux Advanced/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","quantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","itemId","price","totalPrice","Price","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAFc;AAM5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B;AACA,YAAMC,OAAO,GAAGF,KAAK,CAACG,OAAtB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;;AAEA,UAAI,CAACH,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACfC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADD;AAEfG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFA;AAGfb,UAAAA,QAAQ,EAAE,CAHK;AAIfc,UAAAA,UAAU,EAAET,OAAO,CAACU,KAJL;AAKflB,UAAAA,IAAI,EAAEQ,OAAO,CAACW;AALC,SAAjB;AAOD,OARD,MAQO;AACLT,QAAAA,YAAY,CAACP,QAAb;AACAO,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACQ,KAA5D;AACD;AACF,KAlBO;;AAmBRI,IAAAA,kBAAkB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;;AACA,UAAIH,YAAY,CAACP,QAAb,KAA0B,CAA9B,EAAiC;AAC/BG,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYmB,MAAZ,CAAoBT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACP,QAAb;AACAO,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACM,KAAjE;AACD;AACF;;AA5BO;AANkB,CAAD,CAA7B;AAsCA,OAAO,MAAMM,WAAW,GAAGvB,SAAS,CAACwB,OAA9B;AACP,eAAexB,SAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    quantity: 0,\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      // Payload is a non-official, community accepted (de facto) naming convention for the property that holds the actual data in a Redux action object.\n      const newItem = state.payload\n      const existingItem = state.items.find((item) => item.id === newItem.id)\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.Price,\n          name: newItem.title,\n        })\n      } else {\n        existingItem.quantity++\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload\n      const existingItem = state.items.find((item) => item.id === id)\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id)\n      } else {\n        existingItem.quantity--\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price\n      }\n    },\n  },\n})\n\nexport const cartActions = cartSlice.actions\nexport default cartSlice\n"]},"metadata":{},"sourceType":"module"}