{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler\n  };\n};\n\n_s(useInput, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/marconthemove/code/MARConthemove/jsFutureTraining React/16 Form Project/src/hooks/use-input.js"],"names":["React","useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","isValid"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAGA,SAAO;AACLM,IAAAA,KAAK,EAAET,YADF;AAELW,IAAAA,OAAO,EAAEP,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,CArBD;;GAAMZ,Q;;AAuBN,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react'\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState('')\n  const [isTouched, setIsTouched] = useState(false)\n\n  const valueIsValid = validateValue(enteredValue)\n  const hasError = !valueIsValid && isTouched\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value)\n  }\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true)\n  }\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n  }\n}\n\nexport default useInput\n"]},"metadata":{},"sourceType":"module"}