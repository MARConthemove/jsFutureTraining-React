{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useBasicInput = validateValue => {\n  _s();\n\n  const [enteredValue, setenteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setenteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    enteredValue('');\n    isTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useBasicInput, \"rTx/W7AoukiGLRHvWssKjWHUkBE=\");\n\nexport default useBasicInput;","map":{"version":3,"sources":["/Users/marconthemove/code/MARConthemove/jsFutureTraining React/16 Form Project/src/hooks/use-basicInput.js"],"names":["useState","useBasicInput","validateValue","enteredValue","setenteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAIC,aAAD,IAAmB;AAAA;;AACvC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM;AAClBX,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHD;;AAKA,SAAO;AACLO,IAAAA,KAAK,EAAET,YADF;AAELY,IAAAA,OAAO,EAAER,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA5BD;;GAAMb,a;;AA8BN,eAAeA,aAAf","sourcesContent":["import { useState } from 'react'\n\nconst useBasicInput = (validateValue) => {\n  const [enteredValue, setenteredValue] = useState('')\n  const [isTouched, setIsTouched] = useState(false)\n\n  const valueIsValid = validateValue(enteredValue)\n  const hasError = !valueIsValid && isTouched\n\n  const valueChangeHandler = (event) => {\n    setenteredValue(event.target.value)\n  }\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true)\n  }\n\n  const reset = () => {\n    enteredValue('')\n    isTouched(false)\n  }\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  }\n}\n\nexport default useBasicInput\n"]},"metadata":{},"sourceType":"module"}