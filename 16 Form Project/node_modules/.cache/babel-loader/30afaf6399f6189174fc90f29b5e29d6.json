{"ast":null,"code":"var _jsxFileName = \"/Users/marconthemove/code/MARConthemove/jsFutureTraining React/16 Form Project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(value => value.trim() !== '');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.includes('@');\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      return;\n    }\n\n    console.log('Entered Name with useState:', enteredName);\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = enteredEmailIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), emailInputClasses && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"qacxq9a4pZtRFiZvVErZiXbfuHA=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/marconthemove/code/MARConthemove/jsFutureTraining React/16 Form Project/src/components/SimpleInput.js"],"names":["React","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangedHandler","inputBlurHandler","nameBlurHandler","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInvalid","formIsValid","nameInputChangeHandler","event","setEnteredName","target","emailInputChangeHandler","nameInputBlurHandler","setEnteredNameTouched","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","nameInputClasses","nameInputIsInvalid","emailInputClasses"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport useInput from '../hooks/use-input'\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n  } = useInput((value) => value.trim() !== '')\n\n  const [enteredEmail, setEnteredEmail] = useState('')\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false)\n\n  const enteredEmailIsValid = enteredEmail.includes('@')\n  const enteredEmailIsInvalid = !enteredEmailIsValid && enteredEmailTouched\n\n  let formIsValid = false\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value)\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value)\n  }\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true)\n  }\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true)\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault()\n\n    setEnteredNameTouched(true)\n\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      return\n    }\n\n    console.log('Entered Name with useState:', enteredName)\n\n    setEnteredName('')\n    setEnteredNameTouched(false)\n\n    setEnteredEmail('')\n    setEnteredEmailTouched(false)\n  }\n\n  const nameInputClasses = nameInputIsInvalid\n    ? 'form-control invalid'\n    : 'form-control'\n\n  const emailInputClasses = enteredEmailIsInvalid\n    ? 'form-control invalid'\n    : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Name must not be empty</p>\n        )}\n      </div>\n\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your E-mail</label>\n        <input\n          type='email'\n          id='email'\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputClasses && (\n          <p className='error-text'>Please enter a valid email</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  )\n}\n\nexport default SimpleInput\n"]},"metadata":{},"sourceType":"module"}